package org.firstinspires.ftc.teamcode;

import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.hardware.CRServo;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.DcMotorEx;
import com.qualcomm.robotcore.hardware.Servo;

import org.firstinspires.ftc.robotcore.external.navigation.CurrentUnit;

@TeleOp(name="60% motor speed", group="Robot")
//@Disabled
public class Six extends LinearOpMode {

    public DcMotor  leftDrive   = null; //the left drivetrain motor
    public DcMotor  rightDrive  = null; //the right drivetrain motor
    public DcMotor  armMotor    = null; //the arm motor
    public CRServo  intake      = null; //the active intake servo
    public Servo    wrist       = null; //the wrist servo

    final double ARM_TICKS_PER_DEGREE = 19.7924893140647; //exact fraction is (194481/9826)

    final double ARM_COLLAPSED_INTO_ROBOT  = 0;
    final double ARM_COLLECT               = 250 * ARM_TICKS_PER_DEGREE;
    final double ARM_CLEAR_BARRIER         = 230 * ARM_TICKS_PER_DEGREE;
    // ARM_SCORE_SPECIMEN --> ARM_SCORE_LOW_SPECIMEN
    final double ARM_SCORE_LOW_SPECIMEN    = 205 * ARM_TICKS_PER_DEGREE;
    // ARM_SCORE_SAMPLE_IN_LOW --> ARM_SCORE_LOW_SAMPLE (Remember Low Basket Height = High Chamber Height)
    final double ARM_SCORE_LOW_SAMPLE      = 160 * ARM_TICKS_PER_DEGREE;
    final double ARM_ATTACH_HANGING_HOOK   = 120 * ARM_TICKS_PER_DEGREE;
    final double ARM_WINCH_ROBOT           = 15  * ARM_TICKS_PER_DEGREE;

    final double INTAKE_COLLECT    = -1.0;
    final double INTAKE_OFF        =  0.0;
    final double INTAKE_DEPOSIT    =  0.5;

    final double WRIST_FOLDED_IN   = 0.4444;
    final double WRIST_FOLDED_OUT  = 0.7888;
   
    final double FUDGE_FACTOR = 15 * ARM_TICKS_PER_DEGREE;

    double armPosition = (int)ARM_COLLAPSED_INTO_ROBOT;
    double armPositionFudgeFactor;


    @Override
    public void runOpMode() {
        double left;
        double right;
        double forward;
        double rotate;
        double max;


        leftDrive  = hardwareMap.get(DcMotor.class, "left_front_drive"); //the left drivetrain motor
        rightDrive = hardwareMap.get(DcMotor.class, "right_front_drive"); //the right drivetrain motor
        armMotor   = hardwareMap.get(DcMotor.class, "left_arm"); //the arm motor


        leftDrive.setDirection(DcMotor.Direction.FORWARD);
        rightDrive.setDirection(DcMotor.Direction.REVERSE);


        leftDrive.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
        rightDrive.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
        armMotor.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);

        ((DcMotorEx) armMotor).setCurrentAlert(5,CurrentUnit.AMPS);


        armMotor.setTargetPosition(0);
        armMotor.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        armMotor.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);


        intake = hardwareMap.get(CRServo.class, "intake");
        wrist  = hardwareMap.get(Servo.class, "wrist");

        intake.setPower(INTAKE_OFF);
        wrist.setPosition(WRIST_FOLDED_IN);

        telemetry.addLine("Robot Ready.");
        telemetry.update();

        waitForStart();

        while (opModeIsActive()) {

            forward = -gamepad1.left_stick_y;
            rotate  = gamepad1.right_stick_x;


            left  = forward + rotate;
            right = forward - rotate;

            max = Math.max(Math.abs(left), Math.abs(right));
            if (max > 1.0) {
                left /= max;
                right /= max;
            }

            left *=0.60;
            right *=0.60;
         
            leftDrive.setPower(left);
            rightDrive.setPower(right);



            if (gamepad1.a) {
                intake.setPower(INTAKE_COLLECT);
            }
            else if (gamepad1.x) {
                intake.setPower(INTAKE_OFF);
            }
            else if (gamepad1.b) {
                intake.setPower(INTAKE_DEPOSIT);
            }


            
            // armPositionFudgeFactor = FUDGE_FACTOR * (gamepad1.right_trigger + (-gamepad1.left_trigger));
            
    
            if (gamepad1.right_trigger != 0) { 
                wrist.setPosition(WRIST_FOLDED_OUT);
            } 
            else if (gamepad1.left_trigger != 0) {
                wrist.setPosition(WRIST_FOLDED_IN);
            }



            if (gamepad1.right_bumper){
                armPosition = ARM_COLLECT;
                wrist.setPosition(WRIST_FOLDED_OUT);
                intake.setPower(INTAKE_COLLECT);
                }

                else if (gamepad1.left_bumper){
                    armPosition = ARM_CLEAR_BARRIER;
                }

                else if (gamepad1.y){
                    armPosition = ARM_SCORE_LOW_SAMPLE;
                    wrist.setPosition(WRIST_FOLDED_OUT); //makes sample scoring easier
                    
                }

                else if (gamepad1.dpad_left) {
                    armPosition = ARM_COLLAPSED_INTO_ROBOT;
                    intake.setPower(INTAKE_OFF);
                    wrist.setPosition(WRIST_FOLDED_IN);
                }

                else if (gamepad1.dpad_right){
                    armPosition = ARM_SCORE_LOW_SPECIMEN;
                }

                else if (gamepad1.dpad_up){
                    armPosition = ARM_ATTACH_HANGING_HOOK;
                    intake.setPower(INTAKE_OFF);
                    wrist.setPosition(WRIST_FOLDED_IN);
                }

                else if (gamepad1.dpad_down){
                    armPosition = ARM_WINCH_ROBOT;
                    intake.setPower(INTAKE_OFF);
                    wrist.setPosition(WRIST_FOLDED_IN);
            }

            armMotor.setTargetPosition((int) (armPosition  +armPositionFudgeFactor));

            ((DcMotorEx) armMotor).setVelocity(2100);
            armMotor.setMode(DcMotor.RunMode.RUN_TO_POSITION);


            if (((DcMotorEx) armMotor).isOverCurrent()){
                telemetry.addLine("MOTOR EXCEEDED CURRENT LIMIT!");
            }

            telemetry.addData("armTarget: ", armMotor.getTargetPosition());
            telemetry.addData("arm Encoder: ", armMotor.getCurrentPosition());
            telemetry.update();

        }
    }
}
